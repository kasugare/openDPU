  library(NILM1Hz)
  library(plyr)
  library(reshape)
  library(lubridate)
#  library(evaluateNILM)
  library(ggplot2)
  library(RJSONIO)
data.file <- '/home/nilm/CloudNilm/data/meta/10002813/1443711600000-1445871599999.10002813_4637_3.csv'
meta.list.json <- app.detect.main(
      data.file = data.file, find.heavy=F, find.patternHigh=T, find.pattern=F, find.pattern_extend=T,
      find.rice=T, find.standby=T, find.cyclic=F, find.ac=F,
      check.data=F, debug.mode=F)
data.file <- '/home/nilm/CloudNilm/data/meta/10002813/1443711600000-1445871599999.10002813_4637_3.csv'
data.file <- '/home/nilm/CloudNilm/data/meta/10002813/1444575600000-1445785199999.10002813_4637_3.csv'
meta.list.json <- app.detect.main(
      data.file = data.file, find.heavy=F, find.patternHigh=T, find.pattern=F, find.pattern_extend=T,
      find.rice=T, find.standby=T, find.cyclic=F, find.ac=F,
      check.data=F, debug.mode=F)
meta.list.json
cat(meta.list.json)
usage.file <- '/home/nilm/CloudNilm/data/usage/10002813/2015-10-06/1444057200000-1444143599999.10002813_4637_3.csv'
usage.file
app.usage <- app.usage.main(usage.file,app.meta.json, find.heavy=F, find.heavy.pattern=T, find.pattern=T, find.rice=T, find.cyclic=F, find.ac=F, find.standby=T, show.fig=F)
app.usage <- app.usage.main(usage.file,meta.list.json,find.heavy=F, find.heavy.pattern=T, find.pattern=T, find.rice=T, find.cyclic=F, find.ac=F, find.standby=T, show.fig=F)
app.usage
toJSON(app.usage)
cat(toJSON(app.usage))
cat(toJSON(app.usage),pretty=TRUE)
cat(toJSON(app.usage),pretty=T)
cat(toJSON(app.usage),pretty=T)
cat(toJSON(app.usage,pretty=T))
[Ameta.list.json
meta.list.json
cat(meta.list.json)
app.meta.json='{"1": {u"encored_appliance_type": 66, u"parameters": {u"r.time.gap.minute_margin": 40, u"thres_ap.h": 20, u"warming.sec_margin": 3, u"warming.lump.min_gap.minute": 30, u"periodicity": 0.1, u"r.sub.delta_margin": 45, u"cooking.min_fluctuation.num": 0, u"cooking.min_watt": 500, u"eff_size": 10, u"r.cooking.minute_margin": 8, u"search_iter": 1000, u"cooking.max_watt": 1800, u"warming.min_minute": 4.5, u"cooking.max_t.minute": 30, u"r.delta_margin": 300, u"thres_rp.delta": 20, u"wnc_max.hr.gap": 4, u"cooking.min_t.minute": 4}, u"shape_type": u"ricecooker_pattern_scan", u"meta-version": 1, u"generation_info": {u"data_used": {u"start": u"1970-01-01 09:03:39", u"end": u"2015-10-26 23:59:59", u"sampling": 1}, u"computed": u"2015-10-27 15:31:01"}, u"general_info": {u"cooking_num": 4, u"warming_num": 1}, u"warming_info": {u"rp.delta.med": -1.574, u"usage_pwr_med": 86.906, u"med.t": 16, u"eff_sample.num": 20756, u"min.t": 2, u"min.med.rate2": 0.92756, u"ap.h1.min": 58.106, u"usage_pwr_max": 87.212, u"ap.h1.med": 89.459, u"ap.h1.max": 104.89}, u"cooking_info": {u"c.rp.med_delta": -84.117, u"c.min_cooking.time": 425, u"c.ap.med_delta": 729.06, u"c.med_cooking.time": 478, u"c.ap.med_fluc.num": 12, u"c.med_time.gap": 19.358}}, "0": {u"meta-version": 1, u"shape_type": u"StandbyPower", u"generation_info": {u"data_used": {u"start": u"1970-01-01 09:03:39", u"end": u"2015-10-26 23:59:59", u"sampling": 1}, u"computed": u"2015-10-27 15:31:48"}, u"value": 33.9, u"encored_appliance_type": 70}, "3": {u"encored_appliance_type": 71, u"n.pt": 9, u"shape_type": u"pattern_scan_heavy", u"meta-version": 1, u"falling_edge": {u"rp_max": 89.908, u"ap_max": -934.28, u"rp_min": 88.266, u"rp_median": 88.601, u"ap_min": -991.78, u"ap_median": -936.93}, u"duration": {u"duration_min": 10, u"duration_median": 16, u"duration_max": 64.99}, u"rising_edge": {u"rp_max": -87.067, u"ap_max": 988.77, u"rp_min": -108.6, u"rp_median": -88.389, u"ap_min": 934.04, u"ap_median": 935.49}, u"generation_info": {u"data_used": {u"start": u"1970-01-01 09:03:39", u"end": u"2015-10-26 23:59:59", u"sampling": 1}, u"computed": u"2015-10-27 15:26:14"}, u"summit_flag": -1}, "2": {u"encored_appliance_type": 69, u"parameters": {u"min_sigmag.active.n": 20, u"genResolution.n": 20, u"min_sigmag.reactive.n": 3, u"genEffSize.n": 15, u"staPeriodicity.p": 0.1, u"endEffSlot.p": 0.1, u"min_lossrate.p": 0.8, u"clustering.method": 3, u"endConsistency.n": 1}, u"supportRatio": 0.00015651, u"shape_type": u"pattern_scan", u"meta-version": 1, u"falling_edge": {u"ap_max": -1444.3, u"EffRP_Drop.sd": 0.79005, u"EffAP_Drop.med": -1478.7, u"cluster": 1, u"EffRP_Drop.med": 26.872, u"EffAP_Drop.max": -1450.9, u"EffTimeOn.min": 6.99, u"EffAP_Drop.sd": 21.685, u"slotNum.zero": 1, u"EffRP_Drop.max": 28.599, u"ap_min": -1529.8, u"EffAP_Drop.min": -1529.8, u"ap_med": -1478.7, u"slotNum.one": 32, u"EffTimeOn.sd": 129.71, u"rp_max": 28.599, u"EffTimeOn.max": 744.99, u"rp_min": 24.721, u"ZerotoOneratio": 0.03125, u"rp_med": 26.832, u"EffTimeOn.med": 319.46, u"EffRP_Drop.min": 25.171}, u"rising_edge": {u"rp_max": -24.085, u"lost.sig.num": 90, u"med.t": 1768, u"ap_max": 1527.1, u"rp_min": -28.583, u"sum": 41, u"cluster": 23, u"rp_med": -26.989, u"ap_min": 1451, u"min.t": 5.99, u"lost.sig.rate": 68.702, u"min.med.rate": 0.0033881, u"summit_flag": -1, u"ap_med": 1483.6}, u"generation_info": {u"data_used": {u"start": u"1970-01-01 09:03:39", u"end": u"2015-10-26 23:59:59", u"sampling": 1}, u"computed": u"2015-10-27 15:27:28"}}, "5": {u"encored_appliance_type": 71, u"n.pt": 39, u"shape_type": u"pattern_scan_heavy", u"meta-version": 1, u"falling_edge": {u"rp_max": 28.944, u"ap_max": -1451.2, u"rp_min": 24.468, u"rp_median": 26.839, u"ap_min": -1529.7, u"ap_median": -1478.7}, u"duration": {u"duration_min": 14.01, u"duration_median": 332.99, u"duration_max": 752.99}, u"rising_edge": {u"rp_max": -24.085, u"ap_max": 1527.1, u"rp_min": -28.583, u"rp_median": -26.944, u"ap_min": 1451, u"ap_median": 1480.7}, u"generation_info": {u"data_used": {u"start": u"1970-01-01 09:03:39", u"end": u"2015-10-26 23:59:59", u"sampling": 1}, u"computed": u"2015-10-27 15:26:14"}, u"summit_flag": -1}, "4": {u"encored_appliance_type": 71, u"n.pt": 62, u"shape_type": u"pattern_scan_heavy", u"meta-version": 1, u"falling_edge": {u"rp_max": 21.986, u"ap_max": -869.32, u"rp_min": 16.373, u"rp_median": 19.608, u"ap_min": -1013.3, u"ap_median": -971.81}, u"duration": {u"duration_min": 5.99, u"duration_median": 498.97, u"duration_max": 27195}, u"rising_edge": {u"rp_max": -14.832, u"ap_max": 1077, u"rp_min": -21.545, u"rp_median": -19.314, u"ap_min": 913.7, u"ap_median": 967.16}, u"generation_info": {u"data_used": {u"start": u"1970-01-01 09:03:39", u"end": u"2015-10-26 23:59:59", u"sampling": 1}, u"computed": u"2015-10-27 15:26:14"}, u"summit_flag": -1}, "7": {u"encored_appliance_type": 71, u"n.pt": 25, u"shape_type": u"pattern_scan_heavy", u"meta-version": 1, u"falling_edge": {u"rp_max": -146.3, u"ap_max": -1287.8, u"rp_min": -240.46, u"rp_median": -199.03, u"ap_min": -1456, u"ap_median": -1344.4}, u"duration": {u"duration_min": 8.99, u"duration_median": 13.96, u"duration_max": 64.99}, u"rising_edge": {u"rp_max": 274.06, u"ap_max": 1441.5, u"rp_min": 142.7, u"rp_median": 196.92, u"ap_min": 1289.4, u"ap_median": 1350.4}, u"generation_info": {u"data_used": {u"start": u"1970-01-01 09:03:39", u"end": u"2015-10-26 23:59:59", u"sampling": 1}, u"computed": u"2015-10-27 15:26:14"}, u"summit_flag": 1}, "6": {u"encored_appliance_type": 71, u"n.pt": 7, u"shape_type": u"pattern_scan_heavy", u"meta-version": 1, u"falling_edge": {u"rp_max": 30.516, u"ap_max": -1249.1, u"rp_min": -14.045, u"rp_median": 23.543, u"ap_min": -1301, u"ap_median": -1275.8}, u"duration": {u"duration_min": 18, u"duration_median": 82.99, u"duration_max": 146.05}, u"rising_edge": {u"rp_max": 15.702, u"ap_max": 1374, u"rp_min": -29.477, u"rp_median": -24.914, u"ap_min": 1229.4, u"ap_median": 1324.1}, u"generation_info": {u"data_used": {u"start": u"1970-01-01 09:03:39", u"end": u"2015-10-26 23:59:59", u"sampling": 1}, u"computed": u"2015-10-27 15:26:14"}, u"summit_flag": -1}, "8": {u"encored_appliance_type": 71, u"n.pt": 2, u"shape_type": u"pattern_scan_heavy", u"meta-version": 1, u"falling_edge": {u"rp_max": 31.564, u"ap_max": -2007.7, u"rp_min": 30.999, u"rp_median": 31.282, u"ap_min": -2021.9, u"ap_median": -2014.8}, u"duration": {u"duration_min": 118, u"duration_median": 358.47, u"duration_max": 598.94}, u"rising_edge": {u"rp_max": -27.551, u"ap_max": 2092, u"rp_min": -35.364, u"rp_median": -31.457, u"ap_min": 2086.6, u"ap_median": 2089.3}, u"generation_info": {u"data_used": {u"start": u"1970-01-01 09:03:39", u"end": u"2015-10-26 23:59:59", u"sampling": 1}, u"computed": u"2015-10-27 15:26:14"}, u"summit_flag": -1}}'
}
}
"
''
"""
'
app.usage.main <- function(data.file, app.meta.json, find.heavy=T, find.heavy.pattern=T, find.pattern=T, find.rice=T, find.cyclic=T, find.ac=T, find.standby=T, show.fig=F){ 
  
  # #########################################################################
  # 
  # data.file & app.meta.json should be defiend
  #
  # ##########################################################################
  
  x=read.csv(data.file)
  names(x)=c('timestamp','voltage','current','active_power','reactive_power','apparent_power','power_factor')
  
  x$timestamp = as.numeric(x$timestamp)
  x$timestamp = as.POSIXct(x$timestamp,tz="Asia/Seoul",origin="1970-01-01")
  
  y=x #[!duplicated(x),]
  
  #
  #
  # ---------------------- Start Main Code ----------------------------------
  #
  #
  
  app.meta.all = fromJSON(app.meta.json)
  app.usage = list()
  app.usage.res = list()
  app.usage.res[['daily']] = sum(y$active_power)/3600.
  app.usage.res[['hourly']] = dlply(y,.(hour=lubridate::hour(timestamp)),function(df){sum(df$active_power)/3600.})
  
  if( length(app.meta.all) > 0 ) {
    
    for( iapp in names(app.meta.all) ){
      app.meta = app.meta.all[[iapp]]
      app.usage[[iapp]] = list()
      shape_type = app.meta[['shape_type']]
      
      if( shape_type == 'cyclic_box' & find.cyclic) {
        temp <- tryCatch({ meta2signal(meta=app.meta,y,show.fig=show.fig) }, error = function(err) { data.frame(timestamp=y$timestamp,p=0) })
        app.usage[[iapp]][['daily']] = sum(temp$ap.box,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
        
        
      }else if( shape_type == 'high_power' & find.heavy) {
        temp <- tryCatch({ meta2signal(meta=app.meta,y,show.fig=show.fig) }, error = function(err) { data.frame(timestamp=y$timestamp,p=0) })
        app.usage[[iapp]][['daily']] = sum(temp$p,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
        
        
      }else if( shape_type == 'StandbyPower' & find.standby ) {
        base_power <- tryCatch({calculateStandbyPower(y)/nrow(y) }, error = function(err) { 0 })
        temp <- data.frame(timestamp=y$timestamp,p=base_power)
        app.usage[[iapp]][['daily']] = sum(temp$p,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
        
        
      }else if( shape_type == "pattern_scan"& find.pattern) {
        temp <- tryCatch({ meta2PatternScan_summit_1Hz_extend(data=y,meta=app.meta,postprocessing=T,fillMissingData=T) }, error = function(err) { data.frame(timestamp=y$timestamp,p=0) })
        app.usage[[iapp]][['daily']] = sum(temp$p,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
        
        
      }else if( shape_type == "ricecooker_pattern_scan" & find.rice) {
        temp <- tryCatch({ meta2PatternScan.ricecooker_1Hz(data = y, app.meta) }, error = function(err) { data.frame(timestamp=y$timestamp,p=0) })
        head(temp)
        app.usage[[iapp]][['daily']] = sum(temp$p,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
        
      } else if( shape_type == "HMM" & find.ac) {
        temp <- tryCatch({ meta2ac(data = y, app.meta, hsmm=T) }, error = function(err) { data.frame(timestamp=y$timestamp,p=0) })
        app.usage[[iapp]][['daily']] = sum(temp$p,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
        
      } else if( shape_type == "pattern_scan_heavy" & find.heavy.pattern) {
        temp <- tryCatch({ meta2PatternScanHeavy_1Hz(data = y, meta = app.meta, extension.p = 0.2, 
                                                     relApDiff.max = 0.15, relRpDiff.max = 0.2, 
                                                     measurementErrorBound = 10, 
                                                     debug.mode = show.fig) }, error = function(err) { data.frame(timestamp=y$timestamp,p=0) })
        app.usage[[iapp]][['daily']] = sum(temp$p,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
      }
      
      app.usage.res[['daily']] = max(app.usage.res[['daily']] - app.usage[[iapp]][['daily']],0)
      app.usage.res[['hourly']] = as.list(mapply(FUN=function(x,y) max(x-y,0), app.usage.res[['hourly']],app.usage[[iapp]][['hourly']]))
    }
    
  }
  app.usage[['999']] = app.usage.res
  
  return(app.usage)
}
library(NILM1Hz)
app.usage.main <- function(data.file, app.meta.json, find.heavy=T, find.heavy.pattern=T, find.pattern=T, find.rice=T, find.cyclic=T, find.ac=T, find.standby=T, show.fig=F){ 
  
  # #########################################################################
  # 
  # data.file & app.meta.json should be defiend
  #
  # ##########################################################################
  
  x=read.csv(data.file)
  names(x)=c('timestamp','voltage','current','active_power','reactive_power','apparent_power','power_factor')
  
  x$timestamp = as.numeric(x$timestamp)
  x$timestamp = as.POSIXct(x$timestamp,tz="Asia/Seoul",origin="1970-01-01")
  
  y=x #[!duplicated(x),]
  
  #
  #
  # ---------------------- Start Main Code ----------------------------------
  #
  #
  
  app.meta.all = fromJSON(app.meta.json)
  app.usage = list()
  app.usage.res = list()
  app.usage.res[['daily']] = sum(y$active_power)/3600.
  app.usage.res[['hourly']] = dlply(y,.(hour=lubridate::hour(timestamp)),function(df){sum(df$active_power)/3600.})
  
  if( length(app.meta.all) > 0 ) {
    
    for( iapp in names(app.meta.all) ){
      app.meta = app.meta.all[[iapp]]
      app.usage[[iapp]] = list()
      shape_type = app.meta[['shape_type']]
      
      if( shape_type == 'cyclic_box' & find.cyclic) {
        temp <- tryCatch({ meta2signal(meta=app.meta,y,show.fig=show.fig) }, error = function(err) { data.frame(timestamp=y$timestamp,p=0) })
        app.usage[[iapp]][['daily']] = sum(temp$ap.box,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
        
        
      }else if( shape_type == 'high_power' & find.heavy) {
        temp <- tryCatch({ meta2signal(meta=app.meta,y,show.fig=show.fig) }, error = function(err) { data.frame(timestamp=y$timestamp,p=0) })
        app.usage[[iapp]][['daily']] = sum(temp$p,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
        
        
      }else if( shape_type == 'StandbyPower' & find.standby ) {
        base_power <- tryCatch({calculateStandbyPower(y)/nrow(y) }, error = function(err) { 0 })
        temp <- data.frame(timestamp=y$timestamp,p=base_power)
        app.usage[[iapp]][['daily']] = sum(temp$p,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
        
        
      }else if( shape_type == "pattern_scan"& find.pattern) {
        temp <- tryCatch({ meta2PatternScan_summit_1Hz_extend(data=y,meta=app.meta,postprocessing=T,fillMissingData=T) }, error = function(err) { data.frame(timestamp=y$timestamp,p=0) })
        app.usage[[iapp]][['daily']] = sum(temp$p,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
        
        
      }else if( shape_type == "ricecooker_pattern_scan" & find.rice) {
        temp <- tryCatch({ meta2PatternScan.ricecooker_1Hz(data = y, app.meta) }, error = function(err) { data.frame(timestamp=y$timestamp,p=0) })
        head(temp)
        app.usage[[iapp]][['daily']] = sum(temp$p,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
        
      } else if( shape_type == "HMM" & find.ac) {
        temp <- tryCatch({ meta2ac(data = y, app.meta, hsmm=T) }, error = function(err) { data.frame(timestamp=y$timestamp,p=0) })
        app.usage[[iapp]][['daily']] = sum(temp$p,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
        
      } else if( shape_type == "pattern_scan_heavy" & find.heavy.pattern) {
        temp <- tryCatch({ meta2PatternScanHeavy_1Hz(data = y, meta = app.meta, extension.p = 0.2, 
                                                     relApDiff.max = 0.15, relRpDiff.max = 0.2, 
                                                     measurementErrorBound = 10, 
                                                     debug.mode = show.fig) }, error = function(err) { data.frame(timestamp=y$timestamp,p=0) })
        app.usage[[iapp]][['daily']] = sum(temp$p,na.rm=TRUE)/3600.
        app.usage[[iapp]][['hourly']] = dlply(temp,.(hour=lubridate::hour(timestamp)),function(df){ sum(df$p,na.rm=TRUE)/3600.} )
      }
      
      app.usage.res[['daily']] = max(app.usage.res[['daily']] - app.usage[[iapp]][['daily']],0)
      app.usage.res[['hourly']] = as.list(mapply(FUN=function(x,y) max(x-y,0), app.usage.res[['hourly']],app.usage[[iapp]][['hourly']]))
    }
    
  }
  app.usage[['999']] = app.usage.res
  
  return(app.usage)
}
data.file <- '/home/nilm/CloudNilm/data/usage/10003795/2015-10-20/1445266800000-1445353199999.10003795_5627_3.csv'
app.json <- '{"1": {"encored_appliance_type": 66, "parameters": {"r.time.gap.minute_margin": 40, "thres_ap.h": 20, "warming.sec_margin": 3, "warming.lump.min_gap.minute": 30, "periodicity": 0.1, "r.sub.delta_margin": 45, "cooking.min_fluctuation.num": 0, "cooking.min_watt": 500, "eff_size": 10, "r.cooking.minute_margin": 8, "search_iter": 1000, "cooking.max_watt": 1800, "warming.min_minute": 4.5, "cooking.max_t.minute": 30, "r.delta_margin": 300, "thres_rp.delta": 20, "wnc_max.hr.gap": 4, "cooking.min_t.minute": 4}, "shape_type": "ricecooker_pattern_scan", "meta-version": 1, "generation_info": {"data_used": {"start": "1970-01-01 09:03:39", "end": "2015-10-26 23:59:59", "sampling": 1}, "computed": "2015-10-27 15:31:01"}, "general_info": {"cooking_num": 4, "warming_num": 1}, "warming_info": {"rp.delta.med": -1.574, "usage_pwr_med": 86.906, "med.t": 16, "eff_sample.num": 20756, "min.t": 2, "min.med.rate2": 0.92756, "ap.h1.min": 58.106, "usage_pwr_max": 87.212, "ap.h1.med": 89.459, "ap.h1.max": 104.89}, "cooking_info": {"c.rp.med_delta": -84.117, "c.min_cooking.time": 425, "c.ap.med_delta": 729.06, "c.med_cooking.time": 478, "c.ap.med_fluc.num": 12, "c.med_time.gap": 19.358}}, "0": {"meta-version": 1, "shape_type": "StandbyPower", "generation_info": {"data_used": {"start": "1970-01-01 09:03:39", "end": "2015-10-26 23:59:59", "sampling": 1}, "computed": "2015-10-27 15:31:48"}, "value": 33.9, "encored_appliance_type": 70}, "3": {"encored_appliance_type": 71, "n.pt": 9, "shape_type": "pattern_scan_heavy", "meta-version": 1, "falling_edge": {"rp_max": 89.908, "ap_max": -934.28, "rp_min": 88.266, "rp_median": 88.601, "ap_min": -991.78, "ap_median": -936.93}, "duration": {"duration_min": 10, "duration_median": 16, "duration_max": 64.99}, "rising_edge": {"rp_max": -87.067, "ap_max": 988.77, "rp_min": -108.6, "rp_median": -88.389, "ap_min": 934.04, "ap_median": 935.49}, "generation_info": {"data_used": {"start": "1970-01-01 09:03:39", "end": "2015-10-26 23:59:59", "sampling": 1}, "computed": "2015-10-27 15:26:14"}, "summit_flag": -1}, "2": {"encored_appliance_type": 69, "parameters": {"min_sigmag.active.n": 20, "genResolution.n": 20, "min_sigmag.reactive.n": 3, "genEffSize.n": 15, "staPeriodicity.p": 0.1, "endEffSlot.p": 0.1, "min_lossrate.p": 0.8, "clustering.method": 3, "endConsistency.n": 1}, "supportRatio": 0.00015651, "shape_type": "pattern_scan", "meta-version": 1, "falling_edge": {"ap_max": -1444.3, "EffRP_Drop.sd": 0.79005, "EffAP_Drop.med": -1478.7, "cluster": 1, "EffRP_Drop.med": 26.872, "EffAP_Drop.max": -1450.9, "EffTimeOn.min": 6.99, "EffAP_Drop.sd": 21.685, "slotNum.zero": 1, "EffRP_Drop.max": 28.599, "ap_min": -1529.8, "EffAP_Drop.min": -1529.8, "ap_med": -1478.7, "slotNum.one": 32, "EffTimeOn.sd": 129.71, "rp_max": 28.599, "EffTimeOn.max": 744.99, "rp_min": 24.721, "ZerotoOneratio": 0.03125, "rp_med": 26.832, "EffTimeOn.med": 319.46, "EffRP_Drop.min": 25.171}, "rising_edge": {"rp_max": -24.085, "lost.sig.num": 90, "med.t": 1768, "ap_max": 1527.1, "rp_min": -28.583, "sum": 41, "cluster": 23, "rp_med": -26.989, "ap_min": 1451, "min.t": 5.99, "lost.sig.rate": 68.702, "min.med.rate": 0.0033881, "summit_flag": -1, "ap_med": 1483.6}, "generation_info": {"data_used": {"start": "1970-01-01 09:03:39", "end": "2015-10-26 23:59:59", "sampling": 1}, "computed": "2015-10-27 15:27:28"}}, "5": {"encored_appliance_type": 71, "n.pt": 39, "shape_type": "pattern_scan_heavy", "meta-version": 1, "falling_edge": {"rp_max": 28.944, "ap_max": -1451.2, "rp_min": 24.468, "rp_median": 26.839, "ap_min": -1529.7, "ap_median": -1478.7}, "duration": {"duration_min": 14.01, "duration_median": 332.99, "duration_max": 752.99}, "rising_edge": {"rp_max": -24.085, "ap_max": 1527.1, "rp_min": -28.583, "rp_median": -26.944, "ap_min": 1451, "ap_median": 1480.7}, "generation_info": {"data_used": {"start": "1970-01-01 09:03:39", "end": "2015-10-26 23:59:59", "sampling": 1}, "computed": "2015-10-27 15:26:14"}, "summit_flag": -1}, "4": {"encored_appliance_type": 71, "n.pt": 62, "shape_type": "pattern_scan_heavy", "meta-version": 1, "falling_edge": {"rp_max": 21.986, "ap_max": -869.32, "rp_min": 16.373, "rp_median": 19.608, "ap_min": -1013.3, "ap_median": -971.81}, "duration": {"duration_min": 5.99, "duration_median": 498.97, "duration_max": 27195}, "rising_edge": {"rp_max": -14.832, "ap_max": 1077, "rp_min": -21.545, "rp_median": -19.314, "ap_min": 913.7, "ap_median": 967.16}, "generation_info": {"data_used": {"start": "1970-01-01 09:03:39", "end": "2015-10-26 23:59:59", "sampling": 1}, "computed": "2015-10-27 15:26:14"}, "summit_flag": -1}, "7": {"encored_appliance_type": 71, "n.pt": 25, "shape_type": "pattern_scan_heavy", "meta-version": 1, "falling_edge": {"rp_max": -146.3, "ap_max": -1287.8, "rp_min": -240.46, "rp_median": -199.03, "ap_min": -1456, "ap_median": -1344.4}, "duration": {"duration_min": 8.99, "duration_median": 13.96, "duration_max": 64.99}, "rising_edge": {"rp_max": 274.06, "ap_max": 1441.5, "rp_min": 142.7, "rp_median": 196.92, "ap_min": 1289.4, "ap_median": 1350.4}, "generation_info": {"data_used": {"start": "1970-01-01 09:03:39", "end": "2015-10-26 23:59:59", "sampling": 1}, "computed": "2015-10-27 15:26:14"}, "summit_flag": 1}, "6": {"encored_appliance_type": 71, "n.pt": 7, "shape_type": "pattern_scan_heavy", "meta-version": 1, "falling_edge": {"rp_max": 30.516, "ap_max": -1249.1, "rp_min": -14.045, "rp_median": 23.543, "ap_min": -1301, "ap_median": -1275.8}, "duration": {"duration_min": 18, "duration_median": 82.99, "duration_max": 146.05}, "rising_edge": {"rp_max": 15.702, "ap_max": 1374, "rp_min": -29.477, "rp_median": -24.914, "ap_min": 1229.4, "ap_median": 1324.1}, "generation_info": {"data_used": {"start": "1970-01-01 09:03:39", "end": "2015-10-26 23:59:59", "sampling": 1}, "computed": "2015-10-27 15:26:14"}, "summit_flag": -1}, "8": {"encored_appliance_type": 71, "n.pt": 2, "shape_type": "pattern_scan_heavy", "meta-version": 1, "falling_edge": {"rp_max": 31.564, "ap_max": -2007.7, "rp_min": 30.999, "rp_median": 31.282, "ap_min": -2021.9, "ap_median": -2014.8}, "duration": {"duration_min": 118, "duration_median": 358.47, "duration_max": 598.94}, "rising_edge": {"rp_max": -27.551, "ap_max": 2092, "rp_min": -35.364, "rp_median": -31.457, "ap_min": 2086.6, "ap_median": 2089.3}, "generation_info": {"data_used": {"start": "1970-01-01 09:03:39", "end": "2015-10-26 23:59:59", "sampling": 1}, "computed": "2015-10-27 15:26:14"}, "summit_flag": -1}}'
'
app.json
app.json <- '{"1": {"encored_appliance_type": 66, "parameters": {"r.time.gap.minute_margin": 40, "thres_ap.h": 20, "warming.sec_margin": 3, "warming.lump.min_gap.minute": 30, "periodicity": 0.1, "r.sub.delta_margin": 45, "cooking.min_fluctuation.num": 0, "cooking.min_watt": 500, "eff_size": 10, "r.cooking.minute_margin": 8, "search_iter": 1000, "cooking.max_watt": 1800, "warming.min_minute": 4.5, "cooking.max_t.minute": 30, "r.delta_margin": 300, "thres_rp.delta": 20, "wnc_max.hr.gap": 4, "cooking.min_t.minute": 4}, "shape_type": "ricecooker_pattern_scan", "meta-version": 1, "generation_info": {"data_used": {"start": "1970-01-01 09:03:39", "end": "2015-10-26 23:59:59", "sampling": 1}, "computed": "2015-10-27 15:31:01"}, "general_info": {"cooking_num": 4, "warming_num": 1}, "warming_info": {"rp.delta.med": -1.574, "usage_pwr_med": 86.906, "med.t": 16, "eff_sample.num": 20756, "min.t": 2, "min.med.rate2": 0.92756, "ap.h1.min": 58.106, "usage_pwr_max": 87.212, "ap.h1.med": 89.459, "ap.h1.max": 104.89}, "cooking_info": {"c.rp.med_delta": -84.117, "c.min_cooking.time": 425, "c.ap.med_delta": 729.06, "c.med_cooking.time": 478, "c.ap.med_fluc.num": 12, "c.med_time.gap": 19.358}}}'
app.usage.main(data.file,app.json,find.heavy=F, find.heavy.pattern=T, find.pattern=T, find.rice=T, find.cyclic=F, find.ac=F, find.standby=T, show.fig=T)
  library(plyr)
  library(reshape)
  library(lubridate)
  #library(evaluateNILM)
  library(ggplot2)
  library(RJSONIO)
app.usage <- app.usage.main(data.file,app.json,find.heavy=F, find.heavy.pattern=T, find.pattern=T, find.rice=T, find.cyclic=F, find.ac=F, find.standby=T, show.fig=T)
app.usage
